name: Pull Request

on:
  pull_request:
    branches:
      - main

env:
  DOCKER_FILE_PATH: Dockerfile
  GOLANG_VERSION: 1.19

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go
        id: go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GOLANG_VERSION }}
          cache: false

      - name: Lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: "1.52.2"
          only-new-issues: false
          args: --timeout 10m

      - name: Generate Tag
        id: generate_tag
        run: |
          sha=${{ github.event.pull_request.head.sha }}
          tag="SNAPSHOT-PR-${{ github.event.pull_request.number }}-${sha:0:8}"
          echo "GIT_TAG=$(echo ${tag})" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image repository path
        run: |
          echo IMAGE_REPOSITORY=$(echo ghcr.io/${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ env.DOCKER_FILE_PATH  }}
          pull: true
          push: true
          cache-to: type=inline
          tags: |
            ${{ env.IMAGE_REPOSITORY }}:${{ steps.generate_tag.outputs.GIT_TAG }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Comment on PR
        uses: mshick/add-pr-comment@v2
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          message-success: "@${{ github.actor }} Image is available for testing. `docker pull ${{ github.repository }}:${{ steps.generate_tag.outputs.GIT_TAG }}`"
          message-failure: "@${{ github.actor }} Yikes! You better fix it before anyone else finds out! [Build](https://github.com/${{ github.repository }}/commit/${{ github.event.pull_request.head.sha }}/checks) has Failed!"
          allow-repeats: true
